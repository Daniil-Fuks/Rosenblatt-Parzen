import math
import random

import matplotlib.pyplot as plt


# Функция, выключающая ненужные точки
# x_dot - выбранная точка, для которой определяются точки, входящие нужную область
# С - искомый параметр
def off_doter(x_dot, xi_dot, c):
    if ((x_dot - xi_dot) / c) ** 2 <= 5:
        return 0.355 - 0.677 ** 2
    else:
        return 0


# Получаем предположительную точку
# x - выбранная точка
def result(lst_y, lst_x, x_dot, c, c2=6):
    global where_f_bigger_zero
    # Если точка уже существует, функция ее выкидывает
    up = 0
    down = 0
    up2 = 0
    down2 = 0
    for i in range(len(lst_y)):
        xi_dot = lst_x[i]

        if xi_dot != x_dot and y[i] in where_f_bigger_zero:
            up += lst_y[i] * off_doter(x_dot, xi_dot, c) * off_doter(max(where_f_bigger_zero), y[i], c2)
            down += off_doter(x_dot, xi_dot, c) * off_doter(max(where_f_bigger_zero), y[i], c2)
            up2 += lst_y[i] * off_doter(x_dot, xi_dot, c) * off_doter(min(where_f_bigger_zero), y[i], c2)
            down2 += off_doter(x_dot, xi_dot, c) * off_doter(min(where_f_bigger_zero), y[i], c2)
    if down == 0 or down2 == 0:
        return 0
    res1 = up / down
    res2 = up2 / down2
    return [res1, res2]


def result_beta(lst_y, lst_x, x_dot, c):
    # Если точка уже существует, функция ее выкидывает
    up = 0
    down = 0
    for i in range(len(lst_y)):
        xi_dot = lst_x[i]
        if xi_dot != x_dot:
            up += lst_y[i] * off_doter(x_dot, xi_dot, c)
            down += off_doter(x_dot, xi_dot, c)
    if down == 0:
        return (0, 0)
    else:
        return up / down


# Вычисление ошибки по полученной точке
def calc_mistake(lst_y, mb_y):
    up = 0
    down = 0
    for i in range(len(lst_y)):
        up += (lst_y[i] - mb_y[i]) ** 2
        down += 1
    return (up / down) ** 0.5


x = [3.04357, 3.04357, 1.10487, 1.10487, -3.15655, -3.15655, -0.63439, -0.63439, 3.0815, 3.0815, -2.08637, -2.08637,
         0.91986, 0.91986, 4.19028, 4.19028, -0.8941, -0.8941, -0.45065, -0.45065, 1.84265, 1.84265, -4.66146, -4.66146,
         -4.70105, -4.70105, 0.45823, 0.45823, -0.55521, -0.55521, -2.73237, -2.73237, 2.08815, 2.08815, 3.24548,
         3.24548,
         -3.33239, -3.33239, -3.79151, -3.79151, 2.60238, 2.60238, 4.36477, 4.36477, -0.96922, -0.96922, -2.09795,
         -2.09795,
         2.52435, 2.52435, -0.74098, -0.74098, -4.34435, -4.34435, -0.06039, -0.06039, 4.83962, 4.83962, 3.88181,
         3.88181,
         4.88434, 4.88434, 2.89802, 2.89802, -2.17909, -2.17909, -3.16234, -3.16234, 0.33091, 0.33091, -2.85907,
         -2.85907,
         -3.01766, -3.01766, 3.55893, 3.55893, -0.60576, -0.60576, -0.58585, -0.58585, 0.82151, 0.82151, 3.93053,
         3.93053,
         4.38696, 4.38696, -2.34197, -2.34197, 4.91322, 4.91322, -3.628, -3.628, -0.77801, -0.77801, 3.11219, 3.11219,
         2.83177,
         2.83177, 3.05169, 3.05169, 3.15201, 3.15201, -2.59205, -2.59205, -4.69601, -4.69601, -4.94889, -4.94889,
         -2.32247,
         -2.32247, 4.67348, 4.67348, -4.88062, -4.88062, -4.89969, -4.89969, 1.81886, 1.81886, -3.49803, -3.49803,
         2.52263,
         2.52263, -3.51537, -3.51537, -2.45081, -2.45081, -0.64156, -0.64156, 3.31452, 3.31452, 3.62789, 3.62789,
         0.94923,
         0.94923, 4.54118, 4.54118, 1.35985, 1.35985, 3.64275, 3.64275, 1.53155, 1.53155, 0.15983, 0.15983, -3.65461,
         -3.65461,
         1.01234, 1.01234, 2.56084, 2.56084, -0.30581, -0.30581, -0.8624, -0.8624, 0.98673, 0.98673, -4.76148, -4.76148,
         3.56111, 3.56111, -1.39762, -1.39762, 4.1438, 4.1438, -1.33796, -1.33796, 3.22681, 3.22681, 0.25581, 0.25581,
         -4.97215,
         -4.97215, 2.66727, 2.66727, 2.59881, 2.59881, -2.55826, -2.55826, -3.67819, -3.67819, 2.93106, 2.93106,
         -0.02164,
         -0.02164, -0.65677, -0.65677, -4.44846, -4.44846, 0.97228, 0.97228, 2.07687, 2.07687, -1.71756, -1.71756,
         2.79839,
         2.79839, -3.91552, -3.91552, 0.5869, 0.5869]

y = [-0.7243, -37.7086, 7.3754, -35.4508, 3.2804, -43.0931, -5.222, -41.3782, 3.5454, -38.9344, -3.1813, -44.8259,
         5.9123, -36.1352, -1.4046, -44.7605, -7.1856, -45.9328, -4.0662, -40.607, 2.2542, -35.2022, 8.1542, -32.5152,
         4.4795, -33.7414, 3.8481, -34.8656, -0.4038, -45.4862, -4.1005, -39.9327, 3.5055, -39.1016, 2.0789, -44.1192,
         2.2388, -35.6723, 4.2774, -35.3801, 2.4255, -34.2611, -2.7064, -44.938, -3.7463, -43.9143, -1.5835, -45.4224,
         -0.0709, -34.1964, -4.607, -42.6292, 6.733, -34.305, -3.2189, -40.6318, -8.428, -42.4227, -3.1541, -40.5554,
         -3.9002, -44.0217, -1.0302, -39.7509, -3.1937, -45.49, 2.0522, -42.2124, 2.2818, -35.8109, -0.9857, -40.1682,
         0.7071, -44.1361, -5.1794, -40.9883, -1.5322, -46.1189, -5.2508, -42.9372, 2.0074, -33.0993, -3.876, -45.0082,
         -1.7593, -45.233, -0.0653, -45.1923, -4.7278, -47.0391, 3.4371, -34.3784, -4.358, -40.8063, -2.9339, -42.5683,
         -0.5596, -40.5057, 0.5194, -40.533, -1.1672, -38.8323, -4.5442, -42.9587, 4.8734, -38.0888, 4.1473, -34.1539,
         -3.2136, -46.2394, -7.8649, -42.8443, 7.3594, -37.7997, 2.5983, -32.6893, 4.0647, -31.8047, 0.7681, -36.24,
         0.5509, -36.2239, 0.1337, -36.9874, -5.2529, -44.9006, -5.0393, -44.2236, -3.0744, -37.6737, -5.5298, -45.8236,
         0.4632, -32.996, -5.9302, -43.8952, 3.4239, -35.9405, -0.5646, -42.7781, 7.717, -34.9878, 0.2217, -39.9742,
         4.2714, -34.8881, 6.0875, -34.5614, 5.8397, -34.9764, -2.1683, -42.6789, -4.7306, -44.3851, 7.6002, -36.452,
         3.6389, -38.281, -2.8631, -38.9704, -5.7086, -46.0745, -4.0613, -43.6942, -1.4182, -44.0945, -1.5625, -40.1931,
         3.9665, -36.9494, 7.8867, -32.2833, 0.9203, -38.1523, 2.7434, -38.8993, -1.2796, -39.1381, -0.4884, -35.9666,
         4.2207, -38.05, 0.3619, -37.0089, -1.9489, -44.4833, 6.3231, -35.9517, 3.8041, -34.7812, 6.1237, -34.287,
         -6.8286, -47.4968, 0.7074, -41.8022, 2.9741, -33.1754, 1.5256, -35.2443]


C = 0.26
C2 = 2.41
C2 = 12


# Определение точек, при которых фи больше нуля
where_f_bigger_zero = []
for i in range(len(y)):
    for j in range(len(y)):
        x_dot = x[i]
        xi_dot = x[j]
        for yi in y:
            if yi * off_doter(x_dot, xi_dot, C) > 0 and yi not in where_f_bigger_zero:
                where_f_bigger_zero.append(yi)



mb_x = []
mb_y = []
i = min(x)
while i < max(x):
    res = result(y, x, i, C, C2)
    print(res)
    if res != 0:
        mb_y.append(res[0])
        mb_y.append(res[1])
        mb_x.append(i)
        mb_x.append(i)
    res = 0
    i += 0.01

plt.scatter(x, y)
plt.scatter(mb_x, mb_y, color='red')
plt.xlabel('x')
plt.ylabel('y')
plt.show()

# Вычисление оптимального С2

# c2 = 0
# mist_e = []
# c2_lst = []
# mb_x = []
# while c2 < 5:
#     c2 += 0.01
#     c2_lst.append(c2)
#     # Получение предположительных точек для каждого Х с одним параметром С.
#     for i in range(len(x)):
#         mb_x.append(result_beta(x, y, y[i], c2))
#     # Вычисление ошибки для каждой точки
#
#     e = calc_mistake(x, mb_x)
#     mist_e.append(e)
#     mb_x = []
# optimal_c = c2_lst[mist_e.index(min(mist_e))]
# print(optimal_c)




# Вычисление оптимального С

# c = 0
# mist_e = []
# c_lst = []
# mb_y = []
# c2 = 0
# c2_lst = []
# while c < 5:
#     c += 0.01
#     c_lst.append(c)
#     # Получение предположительных точек для каждого Х с одним параметром С.
#     for i in range(len(x)):
#         mb_y.append(result_beta(y, x, x[i], c))
#     # Вычисление ошибки для каждой точки
#
#     e = calc_mistake(y, mb_y)
#     mist_e.append(e)
#     mb_y = []
# optimal_c = c_lst[mist_e.index(min(mist_e))]
# print(optimal_c)
